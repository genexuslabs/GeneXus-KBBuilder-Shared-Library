<?xml version="1.0" encoding="utf-8" ?>
<Project DefaultTargets="ShowTargets" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

	<PropertyGroup>
		<!-- Path of GeneXus installation -->
		<GX_PROGRAM_DIR Condition="'$(GX_PROGRAM_DIR)'==''"></GX_PROGRAM_DIR>
	</PropertyGroup>

	<Import Project="$(GX_PROGRAM_DIR)\Imports.targets" />

    <Target Name="ShowTargets">
        <Message Text="BuildWithDB" />
        <Message Text="BuildWithNoDB" />
    </Target>

    <Target Name="ConfigureDataStore">
        <OpenKnowledgeBase Directory="$(localKbPath)" />
        <SetActiveEnvironment EnvironmentName="$(environmentName)" />
        <!-- 
        START TRUNK
        <HasDataStore DataStoreName="Default">
            <Output TaskParameter="Found" PropertyName="DataStoreFound" />
            <Output TaskParameter="DataStoreType" PropertyName="DataStoreType" />
        </HasDataStore>
        <Error Text="The datastore with name 'Default' was not found" Condition=" '$(DataStoreFound)' == 'false' " Importance="high" />
        <Message Text="The datastore with name 'Default' was found, is of type '$(DataStoreType)'" Condition=" '$(DataStoreFound)' == 'true' " Importance="high" />
        END TRUNK
        -->
        <SetGeneratorProperty Condition="'$(dataStoreName)'=='Default'" Generator="Default" Name="Reorganize server tables" Value="Yes" />
        <SetEnvironmentProperty Condition="'$(dataStoreName)'=='GAM'" Name="Keep GAM database updated" Value="true" />
        <SetDataStoreProperty DataStore="$(dataStoreName)" Name="Database name" Value="$(dbName)" />
        <SetDataStoreProperty DataStore="$(dataStoreName)" Name="Server name" Value="$(dbServerName)" />
        <SetDataStoreProperty DataStore="$(dataStoreName)" Name="Server TCP/IP port" Value="$(dbServerPort)" />
        <SetDataStoreProperty Condition="'$(dataStoreName)'=='Default' AND '$(Generator)'=='.NET' AND '$(DataSource)'=='SQL Server'" DataStore="Default" Name="Use trusted connection" Value="No" />
        <SetDataStoreProperty DataStore="$(dataStoreName)" Name="User id" Value="$(dbServerUser)" />
        <SetDataStoreProperty DataStore="$(dataStoreName)" Name="User password" Value="$(dbServerPass)" />
        <SetDataStoreProperty Condition="'$(dataStoreName)'=='Default' AND '$(Generator)'=='Java'" DataStore="Default" Name="Use custom JDBC URL" Value="False" />
    </Target>

    <Target Name="ConfigureEmptyGXFlowDatastore">
        <OpenKnowledgeBase Directory="$(localKbPath)" />
        <SetActiveEnvironment EnvironmentName="$(EnvironmentName)" />
        <SetDataStoreProperty DataStore="GXFLOW" Name="Database name" Value="DBNoExistente" />
		<CloseKnowledgeBase/>
    </Target>

    <Target Name="ConfigureAWSStorageProvider">
        <OpenKnowledgeBase Directory="$(localKbPath)" />
        <SetActiveEnvironment EnvironmentName="$(EnvironmentName)" />
        <SetGeneratorProperty Generator="Default" Name="Storage Provider" Value="$(Provider)" />
        <SetGeneratorProperty Generator="Default" Name="Storage Access Key ID" Value="$(AWSAccessKey)" />
        <SetGeneratorProperty Generator="Default" Name="Storage Secret Access Key" Value="$(AWSSecretKey)" />
        <SetGeneratorProperty Generator="Default" Name="Bucket Name" Value="$(Bucket)" />
        <SetGeneratorProperty Generator="Default" Name="Folder Name" Value="$(Folder)" />
        <SetGeneratorProperty Generator="Default" Name="Privacy" Value="$(Public)" />
        <SetGeneratorProperty Generator="Default" Name="Storage Region" Value="$(Region)" />
        <SetGeneratorProperty Generator="Default" Name="Storage Endpoint" Value="$(EndpointType)" />
        <SetGeneratorProperty Generator="Default" Name="Storage Custom Endpoint" Value="$(Endpoint)" />
        <CloseKnowledgeBase/>
    </Target>

    <Target Name="OpenKB">
        <OpenKnowledgeBase Directory="$(localKbPath)" />
        <SetActiveEnvironment EnvironmentName="$(EnvironmentName)" />
        <!-- Java properties -->
        <SetGeneratorProperty Condition="'$(Generator)'=='Java'" Generator="Default" Name="servlet directory" Value="$(ServletDir)" />
        <SetGeneratorProperty Condition="'$(Generator)'=='Java'" Generator="Default" Name="static content directory seen from client" Value="$(StaticDir)" />
        <SetGeneratorProperty Condition="'$(Generator)'=='Java'" Generator="Default" Name="Compiler Path" Value="$(JavaPath)\javac.exe" />
        <SetDataStoreProperty Condition="'$(Generator)'=='Java'" DataStore="Default" Name="Use custom JDBC URL" Value="False" />
        <SetGeneratorProperty Condition="'$(Generator)'=='Java'" Generator="Default" Name="Interpreter Path" Value="$(JavaPath)\java.exe" />
        <SetGeneratorProperty Condition="'$(Generator)'=='Java'" Generator="Default" Name="JDK_DIR_JAVA" Value="$(JavaPath)\..\" ContinueOnError="WarnAndContinue"/>
        <SetGeneratorProperty Condition="'$(Generator)'=='Java' AND $(TomcatVersionName) != ''" Generator="Default" Name="TOMCAT_VERSION" Value="$(TomcatVersionName)" ContinueOnError="WarnAndContinue"/>
        <SetGeneratorProperty Condition="'$(Generator)'=='Java' AND $(JDBClogFile) != ''" Generator="Default" Name="Log JDBC Activity" Value="Yes" />
        <SetGeneratorProperty Condition="'$(Generator)'=='Java' AND $(JDBClogFile) == ''" Generator="Default" Name="Log JDBC Activity" Value="No" />
        <SetGeneratorProperty Condition="'$(Generator)'=='Java' AND $(JDBClogFile) != ''" Generator="Default" Name="JDBC log file" Value="$(JDBClogFile)" />
        
        <!-- Performance properties -->
        <SetGeneratorProperty Generator="Default" Name="deploy to cloud" Value="No" />
        <SetGeneratorProperty Condition="'$(android)'=='True'" Generator="Frontend" Name="Android SDK directory" Value="$(androidSDKpath)" />
		<CloseKnowledgeBase/>
    </Target>

    <Target Name="SetAngularServicesURL">
		<OpenKnowledgeBase Directory="$(localKbPath)"/>
        <SetGeneratorProperty Generator="Frontend" Name="Services URL" Value="$(httpServicesURL)"/>
        <CloseKnowledgeBase/>
	</Target>
    
    <Target Name="SetMobileCompilationMode">
        <OpenKnowledgeBase Directory="$(localKbPath)" />
        <SetGeneratorProperty Generator="Frontend" Name="ANGULAR_GENERATION_MODE" Value="Distribution" ContinueOnError="WarnAndContinue"/> 
        <!-- 
        START TRUNK
        <HasGenerator GeneratorName="Frontend">
            <Output TaskParameter="Found" PropertyName="GeneratorFound" />
            <Output TaskParameter="GeneratorType" PropertyName="GeneratorType" />
            <Output TaskParameter="UserInterface" PropertyName="GeneratorUserInterface" />
            <Output TaskParameter="Language" PropertyName="GeneratorLanguage" />
        </HasGenerator>
        <Message Text="The generator with name 'Frontend' was not found" Condition=" '$(GeneratorFound)' == 'false' " Importance="high" />
        <Message Text="The generator with name 'Frontend' was found, is of type '$(GeneratorType)', generates '$(GeneratorLanguage)' for '$(GeneratorUserInterface)'" Condition=" '$(GeneratorFound)' == 'true' " Importance="high" />
        <SetGeneratorProperty Condition="'$(GeneratorFound)'=='true'" Generator="Frontend" Name="ANGULAR_GENERATION_MODE" Value="Distribution" />
        END TRUNK
        -->
        <CloseKnowledgeBase/>
    </Target>

    <Target Name="ReadCommiteableProperties">
        <OpenKnowledgeBase Directory="$(localKbPath)" />
        <SetActiveEnvironment EnvironmentName="$(EnvironmentName)" />
        <Delete Condition="Exists($(PropFileAbsolutePath))" Files='$(PropFileAbsolutePath)' />     
        <WriteLinesToFile File="$(PropFileAbsolutePath)" Lines="{" />
        <!-- Read Target Path -->
        <GetEnvironmentProperty Name="TargetPath" >
            <Output TaskParameter="PropertyValue" PropertyName="EnvTargetPath"/>
        </GetEnvironmentProperty>
        <WriteLinesToFile File="$(PropFileAbsolutePath)" Lines='"targetPath":"$(EnvTargetPath)",' />
        <!-- Read Data Source -->
        <GetEnvironmentProperty Name="DataSource" >
            <Output TaskParameter="PropertyValue" PropertyName="EnvDataSource"/>
        </GetEnvironmentProperty>
        <WriteLinesToFile File="$(PropFileAbsolutePath)" Lines='"dataSource":"$(EnvDataSource)",' />
        <!-- Read Generator Language -->
        <GetEnvironmentProperty Name="GeneratedLanguage" >
            <Output TaskParameter="PropertyValue" PropertyName="EnvGenerator"/>
        </GetEnvironmentProperty>
        <WriteLinesToFile File="$(PropFileAbsolutePath)" Lines='"generator":"$(EnvGenerator)",' />
        <!-- IF Java ->> Read Java Package Name -->
        <GetGeneratorProperty Condition="'$(EnvGenerator)' == 'Java'" Name="Java Package Name" > 
            <Output TaskParameter="PropertyValue" PropertyName="JavaPackageName"/> 
        </GetGeneratorProperty> 
        <WriteLinesToFile File="$(PropFileAbsolutePath)" Lines='"javaPackageName":"$(JavaPackageName)"' />
              
        <WriteLinesToFile File="$(PropFileAbsolutePath)" Lines="}" />
		<CloseKnowledgeBase/>
    </Target>
    
    <Target Name="CloseKB">
		<OpenKnowledgeBase Directory="$(localKbPath)"/>
		<CloseKnowledgeBase/>
    </Target>
   
</Project>